// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id             String       @id @default(uuid())
  email          String       @unique
  username       String       @unique
  password       String
  firstName      String
  lastName       String
  avatar         String?
  role           UserRole     @default(USER)
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  lastLoginAt    DateTime?
  lastActivityAt DateTime?    // Add this field
  organizationId String?

  // Relations
  organization     Organization?     @relation(fields: [organizationId], references: [id])
  createdItems     Item[]            @relation("CreatedBy")
  updatedItems     Item[]            @relation("UpdatedBy")
  movements        Movement[]
  salesOrders      SalesOrder[]
  purchaseOrders   PurchaseOrder[]
  stockAdjustments StockAdjustment[]
  notifications    Notification[]

  @@map("users")
}

enum UserRole {
  ADMIN
  MANAGER
  USER
  VIEWER
}

// Organization
model Organization {
  id        String  @id @default(uuid())
  name      String
  address   String?
  city      String?
  country   String?
  logo      String?  // Add this field
  slug      String?  @unique // Add this field with unique constraint
  isActive  Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users     User[]

  @@map("organizations")
}

// Warehouse Management
model Warehouse {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  address     String?
  city        String?
  state       String?
  country     String?
  zipCode     String?
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  items              ItemWarehouse[]
  movements          Movement[]
  salesOrderItems    SalesOrderItem[]
  purchaseOrderItems PurchaseOrderItem[]
  stockAdjustments   StockAdjustmentItem[]
  sales              Sale[]
  purchases          Purchase[]

  @@map("warehouses")
}

// Product/Item Management
model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  parentId    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")

  items Item[]

  @@map("categories")
}

model Item {
  id             String   @id @default(cuid())
  sku            String   @unique
  name           String
  description    String?
  categoryId     String?
  unitOfMeasure  String
  costPrice      Decimal  @db.Decimal(10, 2)
  sellingPrice   Decimal  @db.Decimal(10, 2)
  minStockLevel  Int      @default(0)
  maxStockLevel  Int?
  reorderPoint   Int      @default(0)
  barcode        String?  @unique
  imageUrl       String?
  isActive       Boolean  @default(true)
  trackInventory Boolean  @default(true)
  createdById    String
  updatedById    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  category  Category? @relation(fields: [categoryId], references: [id])
  createdBy User      @relation("CreatedBy", fields: [createdById], references: [id])
  updatedBy User?     @relation("UpdatedBy", fields: [updatedById], references: [id])

  warehouses           ItemWarehouse[]
  movements            Movement[]
  salesOrderItems      SalesOrderItem[]
  purchaseOrderItems   PurchaseOrderItem[]
  stockAdjustmentItems StockAdjustmentItem[]
  saleItems            SaleItem[]
  purchaseItems        PurchaseItem[]

  @@map("items")
}

// Junction table for Item-Warehouse with stock levels
model ItemWarehouse {
  id             String   @id @default(cuid())
  itemId         String
  warehouseId    String
  currentStock   Int      @default(0)
  reservedStock  Int      @default(0)
  availableStock Int      @default(0)
  lastUpdated    DateTime @default(now())

  // Relations
  item      Item      @relation(fields: [itemId], references: [id], onDelete: Cascade)
  warehouse Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)

  @@unique([itemId, warehouseId])
  @@map("item_warehouses")
}

// Inventory Movement Tracking
model Movement {
  id            String         @id @default(cuid())
  type          MovementType
  itemId        String
  warehouseId   String
  quantity      Int
  unitCost      Decimal?       @db.Decimal(10, 2)
  reference     String?
  referenceType ReferenceType?
  notes         String?
  userId        String
  createdAt     DateTime       @default(now())

  // Relations
  item      Item      @relation(fields: [itemId], references: [id])
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@map("movements")
}

enum MovementType {
  IN
  OUT
  ADJUSTMENT
  TRANSFER
}

enum ReferenceType {
  PURCHASE_ORDER
  SALES_ORDER
  STOCK_ADJUSTMENT
  TRANSFER
  MANUAL
}

// Sales Management
model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String?  @unique
  phone     String?
  address   String?
  city      String?
  state     String?
  country   String?
  zipCode   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  salesOrders SalesOrder[]
  sales       Sale[]
}

model SalesOrder {
  id               String      @id @default(cuid())
  orderNumber      String      @unique
  customerId       String
  userId           String
  orderDate        DateTime    @default(now())
  expectedDelivery DateTime?
  status           OrderStatus @default(PENDING)
  subtotal         Decimal     @db.Decimal(10, 2)
  taxAmount        Decimal     @default(0) @db.Decimal(10, 2)
  totalAmount      Decimal     @db.Decimal(10, 2)
  notes            String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  customer Customer         @relation(fields: [customerId], references: [id])
  user     User             @relation(fields: [userId], references: [id])
  items    SalesOrderItem[]

  @@map("sales_orders")
}

model SalesOrderItem {
  id           String  @id @default(cuid())
  salesOrderId String
  itemId       String
  warehouseId  String
  quantity     Int
  unitPrice    Decimal @db.Decimal(10, 2)
  lineTotal    Decimal @db.Decimal(10, 2)

  salesOrder SalesOrder @relation(fields: [salesOrderId], references: [id], onDelete: Cascade)
  item       Item       @relation(fields: [itemId], references: [id])
  warehouse  Warehouse  @relation(fields: [warehouseId], references: [id])

  @@map("sales_order_items")
}

// Purchase Management
model Supplier {
  id        String   @id @default(cuid())
  name      String
  email     String?  @unique
  phone     String?
  address   String?
  city      String?
  state     String?
  country   String?
  zipCode   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  purchaseOrders PurchaseOrder[]
  purchases      Purchase[]
}

model PurchaseOrder {
  id               String      @id @default(cuid())
  orderNumber      String      @unique
  supplierId       String
  userId           String
  orderDate        DateTime    @default(now())
  expectedDelivery DateTime?
  status           OrderStatus @default(PENDING)
  subtotal         Decimal     @db.Decimal(10, 2)
  taxAmount        Decimal     @default(0) @db.Decimal(10, 2)
  totalAmount      Decimal     @db.Decimal(10, 2)
  notes            String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  supplier Supplier            @relation(fields: [supplierId], references: [id])
  user     User                @relation(fields: [userId], references: [id])
  items    PurchaseOrderItem[]

  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id              String  @id @default(cuid())
  purchaseOrderId String
  itemId          String
  warehouseId     String
  quantity        Int
  unitCost        Decimal @db.Decimal(10, 2)
  lineTotal       Decimal @db.Decimal(10, 2)

  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  item          Item          @relation(fields: [itemId], references: [id])
  warehouse     Warehouse     @relation(fields: [warehouseId], references: [id])

  @@map("purchase_order_items")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

// Stock Adjustments
model StockAdjustment {
  id               String           @id @default(cuid())
  adjustmentNumber String           @unique
  reason           AdjustmentReason
  notes            String?
  userId           String
  createdAt        DateTime         @default(now())

  user  User                  @relation(fields: [userId], references: [id])
  items StockAdjustmentItem[]

  @@map("stock_adjustments")
}

model StockAdjustmentItem {
  id                String  @id @default(cuid())
  stockAdjustmentId String
  itemId            String
  warehouseId       String
  adjustmentQty     Int
  reason            String?

  stockAdjustment StockAdjustment @relation(fields: [stockAdjustmentId], references: [id], onDelete: Cascade)
  item            Item            @relation(fields: [itemId], references: [id])
  warehouse       Warehouse       @relation(fields: [warehouseId], references: [id])

  @@map("stock_adjustment_items")
}

enum AdjustmentReason {
  DAMAGED
  EXPIRED
  LOST
  FOUND
  RECOUNT
  OTHER
}

// Sync Management for PWA
model SyncLog {
  id          String     @id @default(cuid())
  entityType  String
  entityId    String
  action      SyncAction
  syncStatus  SyncStatus @default(PENDING)
  clientId    String?
  version     Int        @default(1)
  data        Json?
  error       String?
  createdAt   DateTime   @default(now())
  processedAt DateTime?

  @@map("sync_logs")
}

enum SyncAction {
  CREATE
  UPDATE
  DELETE
}

enum SyncStatus {
  PENDING
  SUCCESS
  FAILED
  CONFLICT
}

model Notification {
  id        String   @id @default(cuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  title     String
  message   String
  type      String   @default("info")
  priority  String   @default("medium")
  read      Boolean  @default(false)
  actionUrl String?
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

// Sales / Purchases (simple)
model Sale {
  id          String   @id @default(cuid())
  orderNumber String   @unique
  customerId  String
  customer    Customer @relation(fields: [customerId], references: [id])
  amount      Decimal  @db.Decimal(10, 2)
  status      SaleStatus
  channel     String
  warehouseId String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  items SaleItem[]

  @@map("sales")
}

model SaleItem {
  id         String   @id @default(cuid())
  saleId     String
  sale       Sale     @relation(fields: [saleId], references: [id])
  itemId     String
  item       Item     @relation(fields: [itemId], references: [id])
  quantity   Int
  unitPrice  Decimal  @db.Decimal(10, 2)
  totalPrice Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now())

  @@map("sale_items")
}

model Purchase {
  id          String    @id @default(cuid())
  orderNumber String    @unique
  supplierId  String
  supplier    Supplier  @relation(fields: [supplierId], references: [id])
  amount      Decimal   @db.Decimal(10, 2)
  status      PurchaseStatus
  warehouseId String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  items PurchaseItem[]

  @@map("purchases")
}

model PurchaseItem {
  id         String   @id @default(cuid())
  purchaseId String
  purchase   Purchase @relation(fields: [purchaseId], references: [id])
  itemId     String
  item       Item     @relation(fields: [itemId], references: [id])
  quantity   Int
  unitCost   Decimal  @db.Decimal(10, 2)
  totalCost  Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now())

  @@map("purchase_items")
}

enum SaleStatus {
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
  PENDING
}

enum PurchaseStatus {
  PENDING
  RECEIVED
  CANCELLED
}
