// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id             String       @id @default(cuid())
  email          String       @unique
  password       String
  firstName      String?
  lastName       String?
  avatar         String?
  role           String       @default("user") // "admin" | "user"
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  createdAt      DateTime     @default(now())

  // Relations - Add these missing relations
  createdItems      Item[]            @relation("CreatedBy")
  updatedItems      Item[]            @relation("UpdatedBy")
  movements         Movement[]
  salesOrders       SalesOrder[]
  purchaseOrders    PurchaseOrder[]
  stockAdjustments  StockAdjustment[]
  notifications     Notification[]
}

model Organization {
  id            String        @id @default(cuid())
  name          String
  logo          String?
  slug          String?       @unique
  address       String?
  city          String?
  country       String?
  isActive      Boolean       @default(true)
  users         User[]
  subscription  Subscription? 
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("organizations")
}

model Subscription {
  id             String       @id @default(cuid())
  organizationId String       @unique
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  expiryDate     DateTime
  status         String       @default("active")
  plan           String       @default("trial")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("subscriptions")
}

// Warehouse Management
model Warehouse {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  address     String?
  city        String?
  state       String?
  country     String?
  zipCode     String?
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  items              ItemWarehouse[]
  movements          Movement[]
  salesOrderItems    SalesOrderItem[]
  purchaseOrderItems PurchaseOrderItem[]
  stockAdjustments   StockAdjustmentItem[]
  sales              Sale[]
  purchases          Purchase[]

  @@map("warehouses")
}

// Product/Item Management
model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  parentId    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")

  items Item[]

  @@map("categories")
}

model Item {
  id             String   @id @default(cuid())
  sku            String   @unique
  name           String
  description    String?
  categoryId     String?
  unitOfMeasure  String
  costPrice      Decimal  @db.Decimal(10, 2)
  sellingPrice   Decimal  @db.Decimal(10, 2)
  minStockLevel  Int      @default(0)
  maxStockLevel  Int?
  reorderPoint   Int      @default(0)
  barcode        String?  @unique
  imageUrl       String?
  isActive       Boolean  @default(true)
  trackInventory Boolean  @default(true)
  createdById    String
  updatedById    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  category  Category? @relation(fields: [categoryId], references: [id])
  createdBy User      @relation("CreatedBy", fields: [createdById], references: [id])
  updatedBy User?     @relation("UpdatedBy", fields: [updatedById], references: [id])

  warehouses           ItemWarehouse[]
  movements            Movement[]
  salesOrderItems      SalesOrderItem[]
  purchaseOrderItems   PurchaseOrderItem[]
  stockAdjustmentItems StockAdjustmentItem[]
  saleItems            SaleItem[]
  purchaseItems        PurchaseItem[]

  @@map("items")
}

// Junction table for Item-Warehouse with stock levels
model ItemWarehouse {
  id             String   @id @default(cuid())
  itemId         String
  warehouseId    String
  currentStock   Int      @default(0)
  reservedStock  Int      @default(0)
  availableStock Int      @default(0)
  lastUpdated    DateTime @default(now())

  // Relations
  item      Item      @relation(fields: [itemId], references: [id], onDelete: Cascade)
  warehouse Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)

  @@unique([itemId, warehouseId])
  @@map("item_warehouses")
}

// Inventory Movement Tracking
model Movement {
  id            String         @id @default(cuid())
  type          MovementType
  itemId        String
  warehouseId   String
  quantity      Int
  unitCost      Decimal?       @db.Decimal(10, 2)
  reference     String?
  referenceType ReferenceType?
  notes         String?
  userId        String
  createdAt     DateTime       @default(now())

  // Relations
  item      Item      @relation(fields: [itemId], references: [id])
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@map("movements")
}

enum MovementType {
  IN
  OUT
  ADJUSTMENT
  TRANSFER
}

enum ReferenceType {
  PURCHASE_ORDER
  SALES_ORDER
  STOCK_ADJUSTMENT
  TRANSFER
  MANUAL
}

// Sales Management
model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String?  @unique
  phone     String?
  address   String?
  city      String?
  state     String?
  country   String?
  zipCode   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  salesOrders SalesOrder[]
  sales       Sale[]
}

model SalesOrder {
  id               String      @id @default(cuid())
  orderNumber      String      @unique
  customerId       String
  userId           String
  orderDate        DateTime    @default(now())
  expectedDelivery DateTime?
  status           OrderStatus @default(PENDING)
  subtotal         Decimal     @db.Decimal(10, 2)
  taxAmount        Decimal     @default(0) @db.Decimal(10, 2)
  totalAmount      Decimal     @db.Decimal(10, 2)
  notes            String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  customer Customer         @relation(fields: [customerId], references: [id])
  user     User             @relation(fields: [userId], references: [id])
  items    SalesOrderItem[]

  @@map("sales_orders")
}

model SalesOrderItem {
  id           String  @id @default(cuid())
  salesOrderId String
  itemId       String
  warehouseId  String
  quantity     Int
  unitPrice    Decimal @db.Decimal(10, 2)
  lineTotal    Decimal @db.Decimal(10, 2)

  salesOrder SalesOrder @relation(fields: [salesOrderId], references: [id], onDelete: Cascade)
  item       Item       @relation(fields: [itemId], references: [id])
  warehouse  Warehouse  @relation(fields: [warehouseId], references: [id])

  @@map("sales_order_items")
}

// Purchase Management
model Supplier {
  id        String   @id @default(cuid())
  name      String
  email     String?  @unique
  phone     String?
  address   String?
  city      String?
  state     String?
  country   String?
  zipCode   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default
